import EnhancedEventEmitter from './EnhancedEventEmitter';
import Router, { RouterOptions } from './Router';
export declare type WorkerLogLevel = 'debug' | 'warn' | 'error' | 'none';
export interface WorkerSettings {
    /**
     * Logging level for logs generated by the media worker subprocesses (check
     * the Debugging documentation). Valid values are 'debug', 'warn', 'error' and
     * 'none'. Default 'error'.
     */
    logLevel?: WorkerLogLevel;
    /**
     * Log tags for debugging. Check the list of available tags in Debugging
     * documentation.
     */
    logTags?: string[];
    /**
     * Minimun RTC port for ICE, DTLS, RTP, etc. Default 10000.
     */
    rtcMinPort?: number;
    /**
     * Maximum RTC port for ICE, DTLS, RTP, etc. Default 59999.
     */
    rtcMaxPort?: number;
    /**
     * Path to the DTLS public certificate file in PEM format. If unset, a
     * certificate is dynamically created.
     */
    dtlsCertificateFile?: string;
    /**
     * Path to the DTLS certificate private key file in PEM format. If unset, a
     * certificate is dynamically created.
     */
    dtlsPrivateKeyFile?: string;
}
export declare type WorkerUpdateableSettings = Pick<WorkerSettings, 'logLevel' | 'logTags'>;
export default class Worker extends EnhancedEventEmitter {
    private _child?;
    private readonly _workerLogger;
    private readonly _pid;
    private readonly _channel;
    private _closed;
    private readonly _routers;
    private readonly _observer;
    /**
     * @private
     * @emits died
     * @emits @succeed
     * @emits @settingserror
     * @emits @failure
     */
    constructor({ logLevel, logTags, rtcMinPort, rtcMaxPort, dtlsCertificateFile, dtlsPrivateKeyFile }: WorkerSettings);
    /**
     * Worker process identifier (PID).
     */
    get pid(): number;
    /**
     * Whether the Worker is closed.
     */
    get closed(): boolean;
    /**
     * Observer.
     *
     * @emits close
     * @emits {router: Router} newrouter
     */
    get observer(): EnhancedEventEmitter;
    /**
     * Close the Worker.
     */
    close(): void;
    /**
     * Dump Worker.
     */
    dump(): Promise<any>;
    /**
     * Update settings.
     */
    updateSettings({ logLevel, logTags }?: WorkerUpdateableSettings): Promise<void>;
    /**
     * Create a Router.
     */
    createRouter({ mediaCodecs }?: RouterOptions): Promise<Router>;
}
//# sourceMappingURL=Worker.d.ts.map